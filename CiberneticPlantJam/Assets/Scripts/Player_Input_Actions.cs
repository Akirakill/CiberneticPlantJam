//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Scripts/Player_Input_Actions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Player_Input_Actions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Player_Input_Actions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player_Input_Actions"",
    ""maps"": [
        {
            ""name"": ""GameplayMAP"",
            ""id"": ""fbfacfbe-8adb-497e-81f0-6dbdf2eb37d9"",
            ""actions"": [
                {
                    ""name"": ""JumpAction"",
                    ""type"": ""Button"",
                    ""id"": ""e3fce416-d1be-4510-9d2d-0f3c5a40c57e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CharacterAction"",
                    ""type"": ""Button"",
                    ""id"": ""27e95f3d-7e33-4a38-ac81-e5d8c171b165"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PauseAction"",
                    ""type"": ""Button"",
                    ""id"": ""cb6077c2-cb58-4393-a2c4-525c75c8e812"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveAction"",
                    ""type"": ""Value"",
                    ""id"": ""5ab49112-9112-419f-b467-2701b7df3f25"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9f2e1c6f-1d48-4bf0-a91a-fe9ad5acf2f9"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""JumpAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dfbaa393-0b43-4047-882f-eb0b690cc2d2"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CharacterAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""82435939-b905-41b6-a2bd-cd8d99682c10"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PauseAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""96bc026d-33f8-4542-97dd-ca9a144b6e52"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PauseAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""237f45f7-21c1-4f24-b829-08a7cf6dfdf3"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveAction"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""922406cd-c53f-4e63-835c-dbd89ba27bbc"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ba145476-0ed0-4e7d-a78c-c07643cc7c6f"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d7ede000-f97d-4bf3-9566-9941dffa51cf"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""da71294f-5356-4d2c-b01c-6323d3e72b59"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GameplayMAP
        m_GameplayMAP = asset.FindActionMap("GameplayMAP", throwIfNotFound: true);
        m_GameplayMAP_JumpAction = m_GameplayMAP.FindAction("JumpAction", throwIfNotFound: true);
        m_GameplayMAP_CharacterAction = m_GameplayMAP.FindAction("CharacterAction", throwIfNotFound: true);
        m_GameplayMAP_PauseAction = m_GameplayMAP.FindAction("PauseAction", throwIfNotFound: true);
        m_GameplayMAP_MoveAction = m_GameplayMAP.FindAction("MoveAction", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GameplayMAP
    private readonly InputActionMap m_GameplayMAP;
    private List<IGameplayMAPActions> m_GameplayMAPActionsCallbackInterfaces = new List<IGameplayMAPActions>();
    private readonly InputAction m_GameplayMAP_JumpAction;
    private readonly InputAction m_GameplayMAP_CharacterAction;
    private readonly InputAction m_GameplayMAP_PauseAction;
    private readonly InputAction m_GameplayMAP_MoveAction;
    public struct GameplayMAPActions
    {
        private @Player_Input_Actions m_Wrapper;
        public GameplayMAPActions(@Player_Input_Actions wrapper) { m_Wrapper = wrapper; }
        public InputAction @JumpAction => m_Wrapper.m_GameplayMAP_JumpAction;
        public InputAction @CharacterAction => m_Wrapper.m_GameplayMAP_CharacterAction;
        public InputAction @PauseAction => m_Wrapper.m_GameplayMAP_PauseAction;
        public InputAction @MoveAction => m_Wrapper.m_GameplayMAP_MoveAction;
        public InputActionMap Get() { return m_Wrapper.m_GameplayMAP; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayMAPActions set) { return set.Get(); }
        public void AddCallbacks(IGameplayMAPActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayMAPActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayMAPActionsCallbackInterfaces.Add(instance);
            @JumpAction.started += instance.OnJumpAction;
            @JumpAction.performed += instance.OnJumpAction;
            @JumpAction.canceled += instance.OnJumpAction;
            @CharacterAction.started += instance.OnCharacterAction;
            @CharacterAction.performed += instance.OnCharacterAction;
            @CharacterAction.canceled += instance.OnCharacterAction;
            @PauseAction.started += instance.OnPauseAction;
            @PauseAction.performed += instance.OnPauseAction;
            @PauseAction.canceled += instance.OnPauseAction;
            @MoveAction.started += instance.OnMoveAction;
            @MoveAction.performed += instance.OnMoveAction;
            @MoveAction.canceled += instance.OnMoveAction;
        }

        private void UnregisterCallbacks(IGameplayMAPActions instance)
        {
            @JumpAction.started -= instance.OnJumpAction;
            @JumpAction.performed -= instance.OnJumpAction;
            @JumpAction.canceled -= instance.OnJumpAction;
            @CharacterAction.started -= instance.OnCharacterAction;
            @CharacterAction.performed -= instance.OnCharacterAction;
            @CharacterAction.canceled -= instance.OnCharacterAction;
            @PauseAction.started -= instance.OnPauseAction;
            @PauseAction.performed -= instance.OnPauseAction;
            @PauseAction.canceled -= instance.OnPauseAction;
            @MoveAction.started -= instance.OnMoveAction;
            @MoveAction.performed -= instance.OnMoveAction;
            @MoveAction.canceled -= instance.OnMoveAction;
        }

        public void RemoveCallbacks(IGameplayMAPActions instance)
        {
            if (m_Wrapper.m_GameplayMAPActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplayMAPActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayMAPActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayMAPActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameplayMAPActions @GameplayMAP => new GameplayMAPActions(this);
    public interface IGameplayMAPActions
    {
        void OnJumpAction(InputAction.CallbackContext context);
        void OnCharacterAction(InputAction.CallbackContext context);
        void OnPauseAction(InputAction.CallbackContext context);
        void OnMoveAction(InputAction.CallbackContext context);
    }
}
